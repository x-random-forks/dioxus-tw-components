name: Main CI

on:
  push:
    branches: [ "main", "fix/github-actions" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
    main: 
      name: Main CI
      runs-on: ubuntu-latest

      steps: 
        - name: Checkout
          uses: actions/checkout@v4

        - name: Prepare commit message for payload
          if: always()
          env:
            CLEANED_COMMIT_MSG: ${{ github.event.head_commit.message || github.event.pull_request.title }}
          run: |
            echo $CLEANED_COMMIT_MSG
            set -x
            CLEANED_COMMIT_MSG="$(jq -n --arg msg \"$CLEANED_COMMIT_MSG\" '[$msg]' | jq '.[0]')"
            echo "CLEANED_COMMIT_MSG=$CLEANED_COMMIT_MSG" >> $GITHUB_ENV
            echo "CLEANED_COMMIT_MSG=$CLEANED_COMMIT_MSG"
            set +x

        - name: Set up Rust
          uses: dtolnay/rust-toolchain@stable
        
        - name: Install rust tools
          run: |
            rustup update
            rustup component add clippy
            rustup component add rustfmt
            cargo install cargo-audit

        - name: Run tests
          if: always()
          run: cargo test --all-features
        
        - name: Run clippy
          if: always()
          run: cargo clippy --all-features -- -D warnings

        - name: Run format
          if: always()
          run: cargo fmt --all -- --check

        - name: Run audit
          if: always()
          run: cargo audit

        - name: Send custom JSON data to Slack workflow
          uses: slackapi/slack-github-action@v1.26.0
          with:
            payload: |
              {
                "blocks": [
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Actions Status:* ${{ job.status }} ${{ job.status == 'success' && ':white_check_mark:' || ':x:' }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Repository:* <${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Branch:* ${{ github.ref_name }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Commit:* ${{ env.CLEANED_COMMIT_MSG }}"
                      }
                    ]
                  },
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": "Triggered by: ${{ github.actor }} | Event: ${{ github.event_name }} | <${{ github.event.pull_request.html_url || github.event.head_commit.url }}|View details>"
                      }
                    ]
                  }
                ]
              }
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_CICD_WEBHOOK_URL }}
            SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
